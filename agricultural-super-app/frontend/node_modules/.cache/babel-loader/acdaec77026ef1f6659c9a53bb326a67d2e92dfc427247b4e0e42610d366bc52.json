{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { loginUser, registerUser } from '../services/authService';\nexport const login = createAsyncThunk('auth/login', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    return await loginUser(credentials);\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const register = createAsyncThunk('auth/register', async (userData, {\n  rejectWithValue\n}) => {\n  try {\n    return await registerUser(userData);\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    token: localStorage.getItem('token') || null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      localStorage.removeItem('token');\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.status = 'loading';\n    }).addCase(login.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.token = action.payload.token;\n      localStorage.setItem('token', action.payload.token);\n    }).addCase(login.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(register.pending, state => {\n      state.status = 'loading';\n    }).addCase(register.fulfilled, state => {\n      state.status = 'succeeded';\n    }).addCase(register.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","loginUser","registerUser","login","credentials","rejectWithValue","error","message","register","userData","authSlice","name","initialState","user","token","localStorage","getItem","status","reducers","logout","state","removeItem","extraReducers","builder","addCase","pending","fulfilled","action","payload","setItem","rejected","actions","reducer"],"sources":["/home/trevour/moringa-school-work/phase-5/Agricultural-Super-App-/agricultural-super-app/frontend/src/features/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { loginUser, registerUser } from '../services/authService';\n\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (credentials, { rejectWithValue }) => {\n    try {\n      return await loginUser(credentials);\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (userData, { rejectWithValue }) => {\n    try {\n      return await registerUser(userData);\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    token: localStorage.getItem('token') || null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    logout: (state) => {\n      localStorage.removeItem('token');\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.token = action.payload.token;\n        localStorage.setItem('token', action.payload.token);\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      })\n      .addCase(register.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(register.fulfilled, (state) => {\n        state.status = 'succeeded';\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { logout } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,SAAS,EAAEC,YAAY,QAAQ,yBAAyB;AAEjE,OAAO,MAAMC,KAAK,GAAGH,gBAAgB,CACnC,YAAY,EACZ,OAAOI,WAAW,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF,OAAO,MAAMJ,SAAS,CAACG,WAAW,CAAC;EACrC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOD,eAAe,CAACC,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGR,gBAAgB,CACtC,eAAe,EACf,OAAOS,QAAQ,EAAE;EAAEJ;AAAgB,CAAC,KAAK;EACvC,IAAI;IACF,OAAO,MAAMH,YAAY,CAACO,QAAQ,CAAC;EACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACd,OAAOD,eAAe,CAACC,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,MAAMG,SAAS,GAAGX,WAAW,CAAC;EAC5BY,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI;IAC5CC,MAAM,EAAE,MAAM;IACdX,KAAK,EAAE;EACT,CAAC;EACDY,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;MAChCD,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDQ,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACrB,KAAK,CAACsB,OAAO,EAAGL,KAAK,IAAK;MACjCA,KAAK,CAACH,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDO,OAAO,CAACrB,KAAK,CAACuB,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC3CP,KAAK,CAACH,MAAM,GAAG,WAAW;MAC1BG,KAAK,CAACN,KAAK,GAAGa,MAAM,CAACC,OAAO,CAACd,KAAK;MAClCC,YAAY,CAACc,OAAO,CAAC,OAAO,EAAEF,MAAM,CAACC,OAAO,CAACd,KAAK,CAAC;IACrD,CAAC,CAAC,CACDU,OAAO,CAACrB,KAAK,CAAC2B,QAAQ,EAAE,CAACV,KAAK,EAAEO,MAAM,KAAK;MAC1CP,KAAK,CAACH,MAAM,GAAG,QAAQ;MACvBG,KAAK,CAACd,KAAK,GAAGqB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDJ,OAAO,CAAChB,QAAQ,CAACiB,OAAO,EAAGL,KAAK,IAAK;MACpCA,KAAK,CAACH,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDO,OAAO,CAAChB,QAAQ,CAACkB,SAAS,EAAGN,KAAK,IAAK;MACtCA,KAAK,CAACH,MAAM,GAAG,WAAW;IAC5B,CAAC,CAAC,CACDO,OAAO,CAAChB,QAAQ,CAACsB,QAAQ,EAAE,CAACV,KAAK,EAAEO,MAAM,KAAK;MAC7CP,KAAK,CAACH,MAAM,GAAG,QAAQ;MACvBG,KAAK,CAACd,KAAK,GAAGqB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET;AAAO,CAAC,GAAGT,SAAS,CAACqB,OAAO;AAC3C,eAAerB,SAAS,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}